//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KKB.Treasury.TreasuryReport.DSD_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DS_TR143PCONFREC")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_TR143PCONFREC : global::System.Data.DataSet {
        
        private TB_TR143PCONFRECDataTable tableTB_TR143PCONFREC;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_TR143PCONFREC() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_TR143PCONFREC(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TB_TR143PCONFREC"] != null)) {
                    base.Tables.Add(new TB_TR143PCONFRECDataTable(ds.Tables["TB_TR143PCONFREC"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TB_TR143PCONFRECDataTable TB_TR143PCONFREC {
            get {
                return this.tableTB_TR143PCONFREC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DS_TR143PCONFREC cln = ((DS_TR143PCONFREC)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TB_TR143PCONFREC"] != null)) {
                    base.Tables.Add(new TB_TR143PCONFRECDataTable(ds.Tables["TB_TR143PCONFREC"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTB_TR143PCONFREC = ((TB_TR143PCONFRECDataTable)(base.Tables["TB_TR143PCONFREC"]));
            if ((initTable == true)) {
                if ((this.tableTB_TR143PCONFREC != null)) {
                    this.tableTB_TR143PCONFREC.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_TR143PCONFREC";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_TR143PCONFREC.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTB_TR143PCONFREC = new TB_TR143PCONFRECDataTable();
            base.Tables.Add(this.tableTB_TR143PCONFREC);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTB_TR143PCONFREC() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DS_TR143PCONFREC ds = new DS_TR143PCONFREC();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TB_TR143PCONFRECRowChangeEventHandler(object sender, TB_TR143PCONFRECRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TB_TR143PCONFRECDataTable : global::System.Data.TypedTableBase<TB_TR143PCONFRECRow> {
            
            private global::System.Data.DataColumn columnDEALNO;
            
            private global::System.Data.DataColumn columnCUST;
            
            private global::System.Data.DataColumn columnVDATE;
            
            private global::System.Data.DataColumn columnDEALDATE;
            
            private global::System.Data.DataColumn columnCCY;
            
            private global::System.Data.DataColumn columnCCYAMT;
            
            private global::System.Data.DataColumn columnCTRCCY;
            
            private global::System.Data.DataColumn columnCTRAMT;
            
            private global::System.Data.DataColumn columnRATE;
            
            private global::System.Data.DataColumn columnBROKER;
            
            private global::System.Data.DataColumn columnFLAG;
            
            private global::System.Data.DataColumn columnPBROK;
            
            private global::System.Data.DataColumn columnPTYPE;
            
            private global::System.Data.DataColumn columnPNF;
            
            private global::System.Data.DataColumn columnPVDATE;
            
            private global::System.Data.DataColumn columnSELLCURR;
            
            private global::System.Data.DataColumn columnSELLAMT;
            
            private global::System.Data.DataColumn columnBUYCURR;
            
            private global::System.Data.DataColumn columnBUYAMT;
            
            private global::System.Data.DataColumn columnCONFRATE;
            
            private global::System.Data.DataColumn columnPDEALDATE;
            
            private global::System.Data.DataColumn columnTODAYDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECDataTable() {
                this.TableName = "TB_TR143PCONFREC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_TR143PCONFRECDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TB_TR143PCONFRECDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALNOColumn {
                get {
                    return this.columnDEALNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTColumn {
                get {
                    return this.columnCUST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VDATEColumn {
                get {
                    return this.columnVDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALDATEColumn {
                get {
                    return this.columnDEALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCYColumn {
                get {
                    return this.columnCCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCYAMTColumn {
                get {
                    return this.columnCCYAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTRCCYColumn {
                get {
                    return this.columnCTRCCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTRAMTColumn {
                get {
                    return this.columnCTRAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RATEColumn {
                get {
                    return this.columnRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BROKERColumn {
                get {
                    return this.columnBROKER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLAGColumn {
                get {
                    return this.columnFLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PBROKColumn {
                get {
                    return this.columnPBROK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PTYPEColumn {
                get {
                    return this.columnPTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PNFColumn {
                get {
                    return this.columnPNF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PVDATEColumn {
                get {
                    return this.columnPVDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SELLCURRColumn {
                get {
                    return this.columnSELLCURR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SELLAMTColumn {
                get {
                    return this.columnSELLAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUYCURRColumn {
                get {
                    return this.columnBUYCURR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUYAMTColumn {
                get {
                    return this.columnBUYAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONFRATEColumn {
                get {
                    return this.columnCONFRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PDEALDATEColumn {
                get {
                    return this.columnPDEALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TODAYDATEColumn {
                get {
                    return this.columnTODAYDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECRow this[int index] {
                get {
                    return ((TB_TR143PCONFRECRow)(this.Rows[index]));
                }
            }
            
            public event TB_TR143PCONFRECRowChangeEventHandler TB_TR143PCONFRECRowChanging;
            
            public event TB_TR143PCONFRECRowChangeEventHandler TB_TR143PCONFRECRowChanged;
            
            public event TB_TR143PCONFRECRowChangeEventHandler TB_TR143PCONFRECRowDeleting;
            
            public event TB_TR143PCONFRECRowChangeEventHandler TB_TR143PCONFRECRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTB_TR143PCONFRECRow(TB_TR143PCONFRECRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECRow AddTB_TR143PCONFRECRow(
                        string DEALNO, 
                        string CUST, 
                        string VDATE, 
                        string DEALDATE, 
                        string CCY, 
                        decimal CCYAMT, 
                        string CTRCCY, 
                        decimal CTRAMT, 
                        decimal RATE, 
                        string BROKER, 
                        string FLAG, 
                        string PBROK, 
                        string PTYPE, 
                        string PNF, 
                        string PVDATE, 
                        string SELLCURR, 
                        decimal SELLAMT, 
                        string BUYCURR, 
                        decimal BUYAMT, 
                        decimal CONFRATE, 
                        string PDEALDATE, 
                        string TODAYDATE) {
                TB_TR143PCONFRECRow rowTB_TR143PCONFRECRow = ((TB_TR143PCONFRECRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DEALNO,
                        CUST,
                        VDATE,
                        DEALDATE,
                        CCY,
                        CCYAMT,
                        CTRCCY,
                        CTRAMT,
                        RATE,
                        BROKER,
                        FLAG,
                        PBROK,
                        PTYPE,
                        PNF,
                        PVDATE,
                        SELLCURR,
                        SELLAMT,
                        BUYCURR,
                        BUYAMT,
                        CONFRATE,
                        PDEALDATE,
                        TODAYDATE};
                rowTB_TR143PCONFRECRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTB_TR143PCONFRECRow);
                return rowTB_TR143PCONFRECRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TB_TR143PCONFRECDataTable cln = ((TB_TR143PCONFRECDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TB_TR143PCONFRECDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEALNO = base.Columns["DEALNO"];
                this.columnCUST = base.Columns["CUST"];
                this.columnVDATE = base.Columns["VDATE"];
                this.columnDEALDATE = base.Columns["DEALDATE"];
                this.columnCCY = base.Columns["CCY"];
                this.columnCCYAMT = base.Columns["CCYAMT"];
                this.columnCTRCCY = base.Columns["CTRCCY"];
                this.columnCTRAMT = base.Columns["CTRAMT"];
                this.columnRATE = base.Columns["RATE"];
                this.columnBROKER = base.Columns["BROKER"];
                this.columnFLAG = base.Columns["FLAG"];
                this.columnPBROK = base.Columns["PBROK"];
                this.columnPTYPE = base.Columns["PTYPE"];
                this.columnPNF = base.Columns["PNF"];
                this.columnPVDATE = base.Columns["PVDATE"];
                this.columnSELLCURR = base.Columns["SELLCURR"];
                this.columnSELLAMT = base.Columns["SELLAMT"];
                this.columnBUYCURR = base.Columns["BUYCURR"];
                this.columnBUYAMT = base.Columns["BUYAMT"];
                this.columnCONFRATE = base.Columns["CONFRATE"];
                this.columnPDEALDATE = base.Columns["PDEALDATE"];
                this.columnTODAYDATE = base.Columns["TODAYDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEALNO = new global::System.Data.DataColumn("DEALNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALNO);
                this.columnCUST = new global::System.Data.DataColumn("CUST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUST);
                this.columnVDATE = new global::System.Data.DataColumn("VDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVDATE);
                this.columnDEALDATE = new global::System.Data.DataColumn("DEALDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALDATE);
                this.columnCCY = new global::System.Data.DataColumn("CCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCY);
                this.columnCCYAMT = new global::System.Data.DataColumn("CCYAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCYAMT);
                this.columnCTRCCY = new global::System.Data.DataColumn("CTRCCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTRCCY);
                this.columnCTRAMT = new global::System.Data.DataColumn("CTRAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTRAMT);
                this.columnRATE = new global::System.Data.DataColumn("RATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATE);
                this.columnBROKER = new global::System.Data.DataColumn("BROKER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBROKER);
                this.columnFLAG = new global::System.Data.DataColumn("FLAG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG);
                this.columnPBROK = new global::System.Data.DataColumn("PBROK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPBROK);
                this.columnPTYPE = new global::System.Data.DataColumn("PTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPTYPE);
                this.columnPNF = new global::System.Data.DataColumn("PNF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPNF);
                this.columnPVDATE = new global::System.Data.DataColumn("PVDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPVDATE);
                this.columnSELLCURR = new global::System.Data.DataColumn("SELLCURR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSELLCURR);
                this.columnSELLAMT = new global::System.Data.DataColumn("SELLAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSELLAMT);
                this.columnBUYCURR = new global::System.Data.DataColumn("BUYCURR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUYCURR);
                this.columnBUYAMT = new global::System.Data.DataColumn("BUYAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUYAMT);
                this.columnCONFRATE = new global::System.Data.DataColumn("CONFRATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONFRATE);
                this.columnPDEALDATE = new global::System.Data.DataColumn("PDEALDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPDEALDATE);
                this.columnTODAYDATE = new global::System.Data.DataColumn("TODAYDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTODAYDATE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECRow NewTB_TR143PCONFRECRow() {
                return ((TB_TR143PCONFRECRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TB_TR143PCONFRECRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TB_TR143PCONFRECRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TB_TR143PCONFRECRowChanged != null)) {
                    this.TB_TR143PCONFRECRowChanged(this, new TB_TR143PCONFRECRowChangeEvent(((TB_TR143PCONFRECRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TB_TR143PCONFRECRowChanging != null)) {
                    this.TB_TR143PCONFRECRowChanging(this, new TB_TR143PCONFRECRowChangeEvent(((TB_TR143PCONFRECRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TB_TR143PCONFRECRowDeleted != null)) {
                    this.TB_TR143PCONFRECRowDeleted(this, new TB_TR143PCONFRECRowChangeEvent(((TB_TR143PCONFRECRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TB_TR143PCONFRECRowDeleting != null)) {
                    this.TB_TR143PCONFRECRowDeleting(this, new TB_TR143PCONFRECRowChangeEvent(((TB_TR143PCONFRECRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTB_TR143PCONFRECRow(TB_TR143PCONFRECRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_TR143PCONFREC ds = new DS_TR143PCONFREC();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TB_TR143PCONFRECDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TB_TR143PCONFRECRow : global::System.Data.DataRow {
            
            private TB_TR143PCONFRECDataTable tableTB_TR143PCONFREC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_TR143PCONFRECRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTB_TR143PCONFREC = ((TB_TR143PCONFRECDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALNO {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.DEALNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALNO\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.DEALNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUST {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.CUSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUST\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CUSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.VDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VDATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.VDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.DEALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALDATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.DEALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CCY {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.CCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCY\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CCYAMT {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.CCYAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCYAMT\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CCYAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTRCCY {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.CTRCCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CTRCCY\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CTRCCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CTRAMT {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.CTRAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CTRAMT\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CTRAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RATE {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BROKER {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.BROKERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BROKER\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.BROKERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FLAG {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PBROK {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.PBROKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PBROK\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.PBROKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PTYPE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.PTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PTYPE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.PTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PNF {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.PNFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PNF\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.PNFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.PVDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PVDATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.PVDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SELLCURR {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.SELLCURRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SELLCURR\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.SELLCURRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SELLAMT {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.SELLAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SELLAMT\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.SELLAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUYCURR {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.BUYCURRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUYCURR\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.BUYCURRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BUYAMT {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.BUYAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUYAMT\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.BUYAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CONFRATE {
                get {
                    try {
                        return ((decimal)(this[this.tableTB_TR143PCONFREC.CONFRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONFRATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.CONFRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PDEALDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.PDEALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PDEALDATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.PDEALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TODAYDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TR143PCONFREC.TODAYDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TODAYDATE\' in table \'TB_TR143PCONFREC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TR143PCONFREC.TODAYDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALNONull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.DEALNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALNONull() {
                this[this.tableTB_TR143PCONFREC.DEALNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CUSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTNull() {
                this[this.tableTB_TR143PCONFREC.CUSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVDATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.VDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVDATENull() {
                this[this.tableTB_TR143PCONFREC.VDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALDATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.DEALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALDATENull() {
                this[this.tableTB_TR143PCONFREC.DEALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCYNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCYNull() {
                this[this.tableTB_TR143PCONFREC.CCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCYAMTNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CCYAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCYAMTNull() {
                this[this.tableTB_TR143PCONFREC.CCYAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTRCCYNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CTRCCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTRCCYNull() {
                this[this.tableTB_TR143PCONFREC.CTRCCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTRAMTNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CTRAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTRAMTNull() {
                this[this.tableTB_TR143PCONFREC.CTRAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRATENull() {
                this[this.tableTB_TR143PCONFREC.RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBROKERNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.BROKERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBROKERNull() {
                this[this.tableTB_TR143PCONFREC.BROKERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLAGNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLAGNull() {
                this[this.tableTB_TR143PCONFREC.FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPBROKNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.PBROKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPBROKNull() {
                this[this.tableTB_TR143PCONFREC.PBROKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTYPENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.PTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPTYPENull() {
                this[this.tableTB_TR143PCONFREC.PTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPNFNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.PNFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPNFNull() {
                this[this.tableTB_TR143PCONFREC.PNFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.PVDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDATENull() {
                this[this.tableTB_TR143PCONFREC.PVDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSELLCURRNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.SELLCURRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSELLCURRNull() {
                this[this.tableTB_TR143PCONFREC.SELLCURRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSELLAMTNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.SELLAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSELLAMTNull() {
                this[this.tableTB_TR143PCONFREC.SELLAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUYCURRNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.BUYCURRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUYCURRNull() {
                this[this.tableTB_TR143PCONFREC.BUYCURRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUYAMTNull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.BUYAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUYAMTNull() {
                this[this.tableTB_TR143PCONFREC.BUYAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONFRATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.CONFRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONFRATENull() {
                this[this.tableTB_TR143PCONFREC.CONFRATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPDEALDATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.PDEALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPDEALDATENull() {
                this[this.tableTB_TR143PCONFREC.PDEALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTODAYDATENull() {
                return this.IsNull(this.tableTB_TR143PCONFREC.TODAYDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTODAYDATENull() {
                this[this.tableTB_TR143PCONFREC.TODAYDATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TB_TR143PCONFRECRowChangeEvent : global::System.EventArgs {
            
            private TB_TR143PCONFRECRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECRowChangeEvent(TB_TR143PCONFRECRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TR143PCONFRECRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591