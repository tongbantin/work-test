//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KKB.DealTicketReport.DSData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DS_TICKETDL")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_TICKETDL : global::System.Data.DataSet {
        
        private TB_TICKETDLDataTable tableTB_TICKETDL;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_TICKETDL() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_TICKETDL(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TB_TICKETDL"] != null)) {
                    base.Tables.Add(new TB_TICKETDLDataTable(ds.Tables["TB_TICKETDL"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TB_TICKETDLDataTable TB_TICKETDL {
            get {
                return this.tableTB_TICKETDL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DS_TICKETDL cln = ((DS_TICKETDL)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TB_TICKETDL"] != null)) {
                    base.Tables.Add(new TB_TICKETDLDataTable(ds.Tables["TB_TICKETDL"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTB_TICKETDL = ((TB_TICKETDLDataTable)(base.Tables["TB_TICKETDL"]));
            if ((initTable == true)) {
                if ((this.tableTB_TICKETDL != null)) {
                    this.tableTB_TICKETDL.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_TICKETDL";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_TICKETDL.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTB_TICKETDL = new TB_TICKETDLDataTable();
            base.Tables.Add(this.tableTB_TICKETDL);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTB_TICKETDL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DS_TICKETDL ds = new DS_TICKETDL();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TB_TICKETDLRowChangeEventHandler(object sender, TB_TICKETDLRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TB_TICKETDLDataTable : global::System.Data.TypedTableBase<TB_TICKETDLRow> {
            
            private global::System.Data.DataColumn columnBR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnPROD_DESCRIPTION;
            
            private global::System.Data.DataColumn columnPRODTYPE;
            
            private global::System.Data.DataColumn columnPORT;
            
            private global::System.Data.DataColumn columnCOST;
            
            private global::System.Data.DataColumn columnTRAD;
            
            private global::System.Data.DataColumn columnDEALNO;
            
            private global::System.Data.DataColumn columnCUSTOMER;
            
            private global::System.Data.DataColumn columnDEALDATE;
            
            private global::System.Data.DataColumn columnDEALTIME;
            
            private global::System.Data.DataColumn columnVALDATE;
            
            private global::System.Data.DataColumn columnMATDATE;
            
            private global::System.Data.DataColumn columnLINKDEAL;
            
            private global::System.Data.DataColumn columnCCY;
            
            private global::System.Data.DataColumn columnAMOUNT;
            
            private global::System.Data.DataColumn columnRATECODE;
            
            private global::System.Data.DataColumn columnINTRATE;
            
            private global::System.Data.DataColumn columnDEALNOTE;
            
            private global::System.Data.DataColumn columnDEALTEXT;
            
            private global::System.Data.DataColumn columnVERIFIER;
            
            private global::System.Data.DataColumn columnPRINTSTATUS;
            
            private global::System.Data.DataColumn columnTAXAPPLIED;
            
            private global::System.Data.DataColumn columnCAPITALIZEINT;
            
            private global::System.Data.DataColumn columnMANUALPAY;
            
            private global::System.Data.DataColumn columnDELAYINTPAY;
            
            private global::System.Data.DataColumn columnBACKTOBACK;
            
            private global::System.Data.DataColumn columnFINAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLDataTable() {
                this.TableName = "TB_TICKETDL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_TICKETDLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TB_TICKETDLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BRColumn {
                get {
                    return this.columnBR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROD_DESCRIPTIONColumn {
                get {
                    return this.columnPROD_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODTYPEColumn {
                get {
                    return this.columnPRODTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PORTColumn {
                get {
                    return this.columnPORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COSTColumn {
                get {
                    return this.columnCOST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRADColumn {
                get {
                    return this.columnTRAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALNOColumn {
                get {
                    return this.columnDEALNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMERColumn {
                get {
                    return this.columnCUSTOMER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALDATEColumn {
                get {
                    return this.columnDEALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALTIMEColumn {
                get {
                    return this.columnDEALTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALDATEColumn {
                get {
                    return this.columnVALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MATDATEColumn {
                get {
                    return this.columnMATDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINKDEALColumn {
                get {
                    return this.columnLINKDEAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCYColumn {
                get {
                    return this.columnCCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTColumn {
                get {
                    return this.columnAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RATECODEColumn {
                get {
                    return this.columnRATECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTRATEColumn {
                get {
                    return this.columnINTRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALNOTEColumn {
                get {
                    return this.columnDEALNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEALTEXTColumn {
                get {
                    return this.columnDEALTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VERIFIERColumn {
                get {
                    return this.columnVERIFIER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRINTSTATUSColumn {
                get {
                    return this.columnPRINTSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXAPPLIEDColumn {
                get {
                    return this.columnTAXAPPLIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAPITALIZEINTColumn {
                get {
                    return this.columnCAPITALIZEINT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANUALPAYColumn {
                get {
                    return this.columnMANUALPAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELAYINTPAYColumn {
                get {
                    return this.columnDELAYINTPAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BACKTOBACKColumn {
                get {
                    return this.columnBACKTOBACK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINAMOUNTColumn {
                get {
                    return this.columnFINAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLRow this[int index] {
                get {
                    return ((TB_TICKETDLRow)(this.Rows[index]));
                }
            }
            
            public event TB_TICKETDLRowChangeEventHandler TB_TICKETDLRowChanging;
            
            public event TB_TICKETDLRowChangeEventHandler TB_TICKETDLRowChanged;
            
            public event TB_TICKETDLRowChangeEventHandler TB_TICKETDLRowDeleting;
            
            public event TB_TICKETDLRowChangeEventHandler TB_TICKETDLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTB_TICKETDLRow(TB_TICKETDLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLRow AddTB_TICKETDLRow(
                        string BR, 
                        string PRODUCT, 
                        string PROD_DESCRIPTION, 
                        string PRODTYPE, 
                        string PORT, 
                        string COST, 
                        string TRAD, 
                        string DEALNO, 
                        string CUSTOMER, 
                        string DEALDATE, 
                        string DEALTIME, 
                        string VALDATE, 
                        string MATDATE, 
                        string LINKDEAL, 
                        string CCY, 
                        string AMOUNT, 
                        string RATECODE, 
                        string INTRATE, 
                        string DEALNOTE, 
                        string DEALTEXT, 
                        string VERIFIER, 
                        string PRINTSTATUS, 
                        string TAXAPPLIED, 
                        string CAPITALIZEINT, 
                        string MANUALPAY, 
                        string DELAYINTPAY, 
                        string BACKTOBACK, 
                        string FINAMOUNT) {
                TB_TICKETDLRow rowTB_TICKETDLRow = ((TB_TICKETDLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BR,
                        PRODUCT,
                        PROD_DESCRIPTION,
                        PRODTYPE,
                        PORT,
                        COST,
                        TRAD,
                        DEALNO,
                        CUSTOMER,
                        DEALDATE,
                        DEALTIME,
                        VALDATE,
                        MATDATE,
                        LINKDEAL,
                        CCY,
                        AMOUNT,
                        RATECODE,
                        INTRATE,
                        DEALNOTE,
                        DEALTEXT,
                        VERIFIER,
                        PRINTSTATUS,
                        TAXAPPLIED,
                        CAPITALIZEINT,
                        MANUALPAY,
                        DELAYINTPAY,
                        BACKTOBACK,
                        FINAMOUNT};
                rowTB_TICKETDLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTB_TICKETDLRow);
                return rowTB_TICKETDLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TB_TICKETDLDataTable cln = ((TB_TICKETDLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TB_TICKETDLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBR = base.Columns["BR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnPROD_DESCRIPTION = base.Columns["PROD_DESCRIPTION"];
                this.columnPRODTYPE = base.Columns["PRODTYPE"];
                this.columnPORT = base.Columns["PORT"];
                this.columnCOST = base.Columns["COST"];
                this.columnTRAD = base.Columns["TRAD"];
                this.columnDEALNO = base.Columns["DEALNO"];
                this.columnCUSTOMER = base.Columns["CUSTOMER"];
                this.columnDEALDATE = base.Columns["DEALDATE"];
                this.columnDEALTIME = base.Columns["DEALTIME"];
                this.columnVALDATE = base.Columns["VALDATE"];
                this.columnMATDATE = base.Columns["MATDATE"];
                this.columnLINKDEAL = base.Columns["LINKDEAL"];
                this.columnCCY = base.Columns["CCY"];
                this.columnAMOUNT = base.Columns["AMOUNT"];
                this.columnRATECODE = base.Columns["RATECODE"];
                this.columnINTRATE = base.Columns["INTRATE"];
                this.columnDEALNOTE = base.Columns["DEALNOTE"];
                this.columnDEALTEXT = base.Columns["DEALTEXT"];
                this.columnVERIFIER = base.Columns["VERIFIER"];
                this.columnPRINTSTATUS = base.Columns["PRINTSTATUS"];
                this.columnTAXAPPLIED = base.Columns["TAXAPPLIED"];
                this.columnCAPITALIZEINT = base.Columns["CAPITALIZEINT"];
                this.columnMANUALPAY = base.Columns["MANUALPAY"];
                this.columnDELAYINTPAY = base.Columns["DELAYINTPAY"];
                this.columnBACKTOBACK = base.Columns["BACKTOBACK"];
                this.columnFINAMOUNT = base.Columns["FINAMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBR = new global::System.Data.DataColumn("BR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnPROD_DESCRIPTION = new global::System.Data.DataColumn("PROD_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROD_DESCRIPTION);
                this.columnPRODTYPE = new global::System.Data.DataColumn("PRODTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODTYPE);
                this.columnPORT = new global::System.Data.DataColumn("PORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPORT);
                this.columnCOST = new global::System.Data.DataColumn("COST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOST);
                this.columnTRAD = new global::System.Data.DataColumn("TRAD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRAD);
                this.columnDEALNO = new global::System.Data.DataColumn("DEALNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALNO);
                this.columnCUSTOMER = new global::System.Data.DataColumn("CUSTOMER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMER);
                this.columnDEALDATE = new global::System.Data.DataColumn("DEALDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALDATE);
                this.columnDEALTIME = new global::System.Data.DataColumn("DEALTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALTIME);
                this.columnVALDATE = new global::System.Data.DataColumn("VALDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALDATE);
                this.columnMATDATE = new global::System.Data.DataColumn("MATDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATDATE);
                this.columnLINKDEAL = new global::System.Data.DataColumn("LINKDEAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINKDEAL);
                this.columnCCY = new global::System.Data.DataColumn("CCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCCY);
                this.columnAMOUNT = new global::System.Data.DataColumn("AMOUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT);
                this.columnRATECODE = new global::System.Data.DataColumn("RATECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATECODE);
                this.columnINTRATE = new global::System.Data.DataColumn("INTRATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINTRATE);
                this.columnDEALNOTE = new global::System.Data.DataColumn("DEALNOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALNOTE);
                this.columnDEALTEXT = new global::System.Data.DataColumn("DEALTEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEALTEXT);
                this.columnVERIFIER = new global::System.Data.DataColumn("VERIFIER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVERIFIER);
                this.columnPRINTSTATUS = new global::System.Data.DataColumn("PRINTSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTSTATUS);
                this.columnTAXAPPLIED = new global::System.Data.DataColumn("TAXAPPLIED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXAPPLIED);
                this.columnCAPITALIZEINT = new global::System.Data.DataColumn("CAPITALIZEINT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAPITALIZEINT);
                this.columnMANUALPAY = new global::System.Data.DataColumn("MANUALPAY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANUALPAY);
                this.columnDELAYINTPAY = new global::System.Data.DataColumn("DELAYINTPAY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELAYINTPAY);
                this.columnBACKTOBACK = new global::System.Data.DataColumn("BACKTOBACK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBACKTOBACK);
                this.columnFINAMOUNT = new global::System.Data.DataColumn("FINAMOUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINAMOUNT);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLRow NewTB_TICKETDLRow() {
                return ((TB_TICKETDLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TB_TICKETDLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TB_TICKETDLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TB_TICKETDLRowChanged != null)) {
                    this.TB_TICKETDLRowChanged(this, new TB_TICKETDLRowChangeEvent(((TB_TICKETDLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TB_TICKETDLRowChanging != null)) {
                    this.TB_TICKETDLRowChanging(this, new TB_TICKETDLRowChangeEvent(((TB_TICKETDLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TB_TICKETDLRowDeleted != null)) {
                    this.TB_TICKETDLRowDeleted(this, new TB_TICKETDLRowChangeEvent(((TB_TICKETDLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TB_TICKETDLRowDeleting != null)) {
                    this.TB_TICKETDLRowDeleting(this, new TB_TICKETDLRowChangeEvent(((TB_TICKETDLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTB_TICKETDLRow(TB_TICKETDLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_TICKETDL ds = new DS_TICKETDL();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TB_TICKETDLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TB_TICKETDLRow : global::System.Data.DataRow {
            
            private TB_TICKETDLDataTable tableTB_TICKETDL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TB_TICKETDLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTB_TICKETDL = ((TB_TICKETDLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BR {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.BRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BR\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.BRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROD_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.PROD_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROD_DESCRIPTION\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.PROD_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODTYPE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.PRODTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODTYPE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.PRODTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PORT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.PORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PORT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.PORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COST {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COST\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRAD {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.TRADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRAD\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.TRADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALNO {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DEALNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALNO\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DEALNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMER {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.CUSTOMERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMER\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.CUSTOMERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DEALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALDATE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DEALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALTIME {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DEALTIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALTIME\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DEALTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.VALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALDATE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.VALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MATDATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.MATDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MATDATE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.MATDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINKDEAL {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.LINKDEALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINKDEAL\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.LINKDEALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CCY {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.CCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CCY\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.CCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMOUNT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.AMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RATECODE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.RATECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RATECODE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.RATECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INTRATE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.INTRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INTRATE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.INTRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALNOTE {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DEALNOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALNOTE\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DEALNOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEALTEXT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DEALTEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEALTEXT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DEALTEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VERIFIER {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.VERIFIERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VERIFIER\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.VERIFIERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRINTSTATUS {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.PRINTSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINTSTATUS\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.PRINTSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TAXAPPLIED {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.TAXAPPLIEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXAPPLIED\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.TAXAPPLIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAPITALIZEINT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.CAPITALIZEINTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAPITALIZEINT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.CAPITALIZEINTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MANUALPAY {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.MANUALPAYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MANUALPAY\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.MANUALPAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELAYINTPAY {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.DELAYINTPAYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELAYINTPAY\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.DELAYINTPAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BACKTOBACK {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.BACKTOBACKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BACKTOBACK\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.BACKTOBACKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINAMOUNT {
                get {
                    try {
                        return ((string)(this[this.tableTB_TICKETDL.FINAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINAMOUNT\' in table \'TB_TICKETDL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTB_TICKETDL.FINAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRNull() {
                return this.IsNull(this.tableTB_TICKETDL.BRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRNull() {
                this[this.tableTB_TICKETDL.BRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tableTB_TICKETDL.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tableTB_TICKETDL.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROD_DESCRIPTIONNull() {
                return this.IsNull(this.tableTB_TICKETDL.PROD_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROD_DESCRIPTIONNull() {
                this[this.tableTB_TICKETDL.PROD_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODTYPENull() {
                return this.IsNull(this.tableTB_TICKETDL.PRODTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODTYPENull() {
                this[this.tableTB_TICKETDL.PRODTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPORTNull() {
                return this.IsNull(this.tableTB_TICKETDL.PORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPORTNull() {
                this[this.tableTB_TICKETDL.PORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOSTNull() {
                return this.IsNull(this.tableTB_TICKETDL.COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOSTNull() {
                this[this.tableTB_TICKETDL.COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRADNull() {
                return this.IsNull(this.tableTB_TICKETDL.TRADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRADNull() {
                this[this.tableTB_TICKETDL.TRADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALNONull() {
                return this.IsNull(this.tableTB_TICKETDL.DEALNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALNONull() {
                this[this.tableTB_TICKETDL.DEALNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERNull() {
                return this.IsNull(this.tableTB_TICKETDL.CUSTOMERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERNull() {
                this[this.tableTB_TICKETDL.CUSTOMERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALDATENull() {
                return this.IsNull(this.tableTB_TICKETDL.DEALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALDATENull() {
                this[this.tableTB_TICKETDL.DEALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALTIMENull() {
                return this.IsNull(this.tableTB_TICKETDL.DEALTIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALTIMENull() {
                this[this.tableTB_TICKETDL.DEALTIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALDATENull() {
                return this.IsNull(this.tableTB_TICKETDL.VALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALDATENull() {
                this[this.tableTB_TICKETDL.VALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMATDATENull() {
                return this.IsNull(this.tableTB_TICKETDL.MATDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMATDATENull() {
                this[this.tableTB_TICKETDL.MATDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINKDEALNull() {
                return this.IsNull(this.tableTB_TICKETDL.LINKDEALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINKDEALNull() {
                this[this.tableTB_TICKETDL.LINKDEALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCYNull() {
                return this.IsNull(this.tableTB_TICKETDL.CCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCYNull() {
                this[this.tableTB_TICKETDL.CCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTNull() {
                return this.IsNull(this.tableTB_TICKETDL.AMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTNull() {
                this[this.tableTB_TICKETDL.AMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRATECODENull() {
                return this.IsNull(this.tableTB_TICKETDL.RATECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRATECODENull() {
                this[this.tableTB_TICKETDL.RATECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINTRATENull() {
                return this.IsNull(this.tableTB_TICKETDL.INTRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINTRATENull() {
                this[this.tableTB_TICKETDL.INTRATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALNOTENull() {
                return this.IsNull(this.tableTB_TICKETDL.DEALNOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALNOTENull() {
                this[this.tableTB_TICKETDL.DEALNOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEALTEXTNull() {
                return this.IsNull(this.tableTB_TICKETDL.DEALTEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEALTEXTNull() {
                this[this.tableTB_TICKETDL.DEALTEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVERIFIERNull() {
                return this.IsNull(this.tableTB_TICKETDL.VERIFIERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVERIFIERNull() {
                this[this.tableTB_TICKETDL.VERIFIERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRINTSTATUSNull() {
                return this.IsNull(this.tableTB_TICKETDL.PRINTSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRINTSTATUSNull() {
                this[this.tableTB_TICKETDL.PRINTSTATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXAPPLIEDNull() {
                return this.IsNull(this.tableTB_TICKETDL.TAXAPPLIEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXAPPLIEDNull() {
                this[this.tableTB_TICKETDL.TAXAPPLIEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAPITALIZEINTNull() {
                return this.IsNull(this.tableTB_TICKETDL.CAPITALIZEINTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAPITALIZEINTNull() {
                this[this.tableTB_TICKETDL.CAPITALIZEINTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANUALPAYNull() {
                return this.IsNull(this.tableTB_TICKETDL.MANUALPAYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANUALPAYNull() {
                this[this.tableTB_TICKETDL.MANUALPAYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELAYINTPAYNull() {
                return this.IsNull(this.tableTB_TICKETDL.DELAYINTPAYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELAYINTPAYNull() {
                this[this.tableTB_TICKETDL.DELAYINTPAYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBACKTOBACKNull() {
                return this.IsNull(this.tableTB_TICKETDL.BACKTOBACKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBACKTOBACKNull() {
                this[this.tableTB_TICKETDL.BACKTOBACKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINAMOUNTNull() {
                return this.IsNull(this.tableTB_TICKETDL.FINAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINAMOUNTNull() {
                this[this.tableTB_TICKETDL.FINAMOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TB_TICKETDLRowChangeEvent : global::System.EventArgs {
            
            private TB_TICKETDLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLRowChangeEvent(TB_TICKETDLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TB_TICKETDLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591