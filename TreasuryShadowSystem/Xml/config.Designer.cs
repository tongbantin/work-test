//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TreasuryShadowSystem.Xml {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("KiatnakinBank")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class KiatnakinBank : global::System.Data.DataSet {
        
        private ForeignExchangeDataTable tableForeignExchange;
        
        private CurrencyDataTable tableCurrency;
        
        private MappingDataTable tableMapping;
        
        private SheetDayDataTable tableSheetDay;
        
        private FrequencyDataTable tableFrequency;
        
        private SheetDataTable tableSheet;
        
        private global::System.Data.DataRelation relationForeignExchange_Currency;
        
        private global::System.Data.DataRelation relationCurrency_Mapping;
        
        private global::System.Data.DataRelation relationSheetDay_Frequency;
        
        private global::System.Data.DataRelation relationFrequency_Sheet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KiatnakinBank() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected KiatnakinBank(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ForeignExchange"] != null)) {
                    base.Tables.Add(new ForeignExchangeDataTable(ds.Tables["ForeignExchange"]));
                }
                if ((ds.Tables["Currency"] != null)) {
                    base.Tables.Add(new CurrencyDataTable(ds.Tables["Currency"]));
                }
                if ((ds.Tables["Mapping"] != null)) {
                    base.Tables.Add(new MappingDataTable(ds.Tables["Mapping"]));
                }
                if ((ds.Tables["SheetDay"] != null)) {
                    base.Tables.Add(new SheetDayDataTable(ds.Tables["SheetDay"]));
                }
                if ((ds.Tables["Frequency"] != null)) {
                    base.Tables.Add(new FrequencyDataTable(ds.Tables["Frequency"]));
                }
                if ((ds.Tables["Sheet"] != null)) {
                    base.Tables.Add(new SheetDataTable(ds.Tables["Sheet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ForeignExchangeDataTable ForeignExchange {
            get {
                return this.tableForeignExchange;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CurrencyDataTable Currency {
            get {
                return this.tableCurrency;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MappingDataTable Mapping {
            get {
                return this.tableMapping;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SheetDayDataTable SheetDay {
            get {
                return this.tableSheetDay;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FrequencyDataTable Frequency {
            get {
                return this.tableFrequency;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SheetDataTable Sheet {
            get {
                return this.tableSheet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            KiatnakinBank cln = ((KiatnakinBank)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ForeignExchange"] != null)) {
                    base.Tables.Add(new ForeignExchangeDataTable(ds.Tables["ForeignExchange"]));
                }
                if ((ds.Tables["Currency"] != null)) {
                    base.Tables.Add(new CurrencyDataTable(ds.Tables["Currency"]));
                }
                if ((ds.Tables["Mapping"] != null)) {
                    base.Tables.Add(new MappingDataTable(ds.Tables["Mapping"]));
                }
                if ((ds.Tables["SheetDay"] != null)) {
                    base.Tables.Add(new SheetDayDataTable(ds.Tables["SheetDay"]));
                }
                if ((ds.Tables["Frequency"] != null)) {
                    base.Tables.Add(new FrequencyDataTable(ds.Tables["Frequency"]));
                }
                if ((ds.Tables["Sheet"] != null)) {
                    base.Tables.Add(new SheetDataTable(ds.Tables["Sheet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableForeignExchange = ((ForeignExchangeDataTable)(base.Tables["ForeignExchange"]));
            if ((initTable == true)) {
                if ((this.tableForeignExchange != null)) {
                    this.tableForeignExchange.InitVars();
                }
            }
            this.tableCurrency = ((CurrencyDataTable)(base.Tables["Currency"]));
            if ((initTable == true)) {
                if ((this.tableCurrency != null)) {
                    this.tableCurrency.InitVars();
                }
            }
            this.tableMapping = ((MappingDataTable)(base.Tables["Mapping"]));
            if ((initTable == true)) {
                if ((this.tableMapping != null)) {
                    this.tableMapping.InitVars();
                }
            }
            this.tableSheetDay = ((SheetDayDataTable)(base.Tables["SheetDay"]));
            if ((initTable == true)) {
                if ((this.tableSheetDay != null)) {
                    this.tableSheetDay.InitVars();
                }
            }
            this.tableFrequency = ((FrequencyDataTable)(base.Tables["Frequency"]));
            if ((initTable == true)) {
                if ((this.tableFrequency != null)) {
                    this.tableFrequency.InitVars();
                }
            }
            this.tableSheet = ((SheetDataTable)(base.Tables["Sheet"]));
            if ((initTable == true)) {
                if ((this.tableSheet != null)) {
                    this.tableSheet.InitVars();
                }
            }
            this.relationForeignExchange_Currency = this.Relations["ForeignExchange_Currency"];
            this.relationCurrency_Mapping = this.Relations["Currency_Mapping"];
            this.relationSheetDay_Frequency = this.Relations["SheetDay_Frequency"];
            this.relationFrequency_Sheet = this.Relations["Frequency_Sheet"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "KiatnakinBank";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableForeignExchange = new ForeignExchangeDataTable();
            base.Tables.Add(this.tableForeignExchange);
            this.tableCurrency = new CurrencyDataTable();
            base.Tables.Add(this.tableCurrency);
            this.tableMapping = new MappingDataTable();
            base.Tables.Add(this.tableMapping);
            this.tableSheetDay = new SheetDayDataTable();
            base.Tables.Add(this.tableSheetDay);
            this.tableFrequency = new FrequencyDataTable();
            base.Tables.Add(this.tableFrequency);
            this.tableSheet = new SheetDataTable();
            base.Tables.Add(this.tableSheet);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("ForeignExchange_Currency", new global::System.Data.DataColumn[] {
                        this.tableForeignExchange.ForeignExchange_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrency.ForeignExchange_IdColumn});
            this.tableCurrency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Currency_Mapping", new global::System.Data.DataColumn[] {
                        this.tableCurrency.Currency_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMapping.Currency_IdColumn});
            this.tableMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("SheetDay_Frequency", new global::System.Data.DataColumn[] {
                        this.tableSheetDay.SheetDay_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFrequency.SheetDay_IdColumn});
            this.tableFrequency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Frequency_Sheet", new global::System.Data.DataColumn[] {
                        this.tableFrequency.Frequency_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSheet.Frequency_IdColumn});
            this.tableSheet.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationForeignExchange_Currency = new global::System.Data.DataRelation("ForeignExchange_Currency", new global::System.Data.DataColumn[] {
                        this.tableForeignExchange.ForeignExchange_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrency.ForeignExchange_IdColumn}, false);
            this.relationForeignExchange_Currency.Nested = true;
            this.Relations.Add(this.relationForeignExchange_Currency);
            this.relationCurrency_Mapping = new global::System.Data.DataRelation("Currency_Mapping", new global::System.Data.DataColumn[] {
                        this.tableCurrency.Currency_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMapping.Currency_IdColumn}, false);
            this.relationCurrency_Mapping.Nested = true;
            this.Relations.Add(this.relationCurrency_Mapping);
            this.relationSheetDay_Frequency = new global::System.Data.DataRelation("SheetDay_Frequency", new global::System.Data.DataColumn[] {
                        this.tableSheetDay.SheetDay_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFrequency.SheetDay_IdColumn}, false);
            this.relationSheetDay_Frequency.Nested = true;
            this.Relations.Add(this.relationSheetDay_Frequency);
            this.relationFrequency_Sheet = new global::System.Data.DataRelation("Frequency_Sheet", new global::System.Data.DataColumn[] {
                        this.tableFrequency.Frequency_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSheet.Frequency_IdColumn}, false);
            this.relationFrequency_Sheet.Nested = true;
            this.Relations.Add(this.relationFrequency_Sheet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeForeignExchange() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCurrency() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMapping() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSheetDay() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFrequency() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSheet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            KiatnakinBank ds = new KiatnakinBank();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ForeignExchangeRowChangeEventHandler(object sender, ForeignExchangeRowChangeEvent e);
        
        public delegate void CurrencyRowChangeEventHandler(object sender, CurrencyRowChangeEvent e);
        
        public delegate void MappingRowChangeEventHandler(object sender, MappingRowChangeEvent e);
        
        public delegate void SheetDayRowChangeEventHandler(object sender, SheetDayRowChangeEvent e);
        
        public delegate void FrequencyRowChangeEventHandler(object sender, FrequencyRowChangeEvent e);
        
        public delegate void SheetRowChangeEventHandler(object sender, SheetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ForeignExchangeDataTable : global::System.Data.TypedTableBase<ForeignExchangeRow> {
            
            private global::System.Data.DataColumn columnCapital;
            
            private global::System.Data.DataColumn columnForeignExchange_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeDataTable() {
                this.TableName = "ForeignExchange";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ForeignExchangeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ForeignExchangeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapitalColumn {
                get {
                    return this.columnCapital;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForeignExchange_IdColumn {
                get {
                    return this.columnForeignExchange_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRow this[int index] {
                get {
                    return ((ForeignExchangeRow)(this.Rows[index]));
                }
            }
            
            public event ForeignExchangeRowChangeEventHandler ForeignExchangeRowChanging;
            
            public event ForeignExchangeRowChangeEventHandler ForeignExchangeRowChanged;
            
            public event ForeignExchangeRowChangeEventHandler ForeignExchangeRowDeleting;
            
            public event ForeignExchangeRowChangeEventHandler ForeignExchangeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddForeignExchangeRow(ForeignExchangeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRow AddForeignExchangeRow(string Capital) {
                ForeignExchangeRow rowForeignExchangeRow = ((ForeignExchangeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Capital,
                        null};
                rowForeignExchangeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowForeignExchangeRow);
                return rowForeignExchangeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ForeignExchangeDataTable cln = ((ForeignExchangeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ForeignExchangeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCapital = base.Columns["Capital"];
                this.columnForeignExchange_Id = base.Columns["ForeignExchange_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCapital = new global::System.Data.DataColumn("Capital", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCapital);
                this.columnForeignExchange_Id = new global::System.Data.DataColumn("ForeignExchange_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnForeignExchange_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnForeignExchange_Id}, true));
                this.columnCapital.Namespace = "";
                this.columnForeignExchange_Id.AutoIncrement = true;
                this.columnForeignExchange_Id.AllowDBNull = false;
                this.columnForeignExchange_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRow NewForeignExchangeRow() {
                return ((ForeignExchangeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ForeignExchangeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ForeignExchangeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ForeignExchangeRowChanged != null)) {
                    this.ForeignExchangeRowChanged(this, new ForeignExchangeRowChangeEvent(((ForeignExchangeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ForeignExchangeRowChanging != null)) {
                    this.ForeignExchangeRowChanging(this, new ForeignExchangeRowChangeEvent(((ForeignExchangeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ForeignExchangeRowDeleted != null)) {
                    this.ForeignExchangeRowDeleted(this, new ForeignExchangeRowChangeEvent(((ForeignExchangeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ForeignExchangeRowDeleting != null)) {
                    this.ForeignExchangeRowDeleting(this, new ForeignExchangeRowChangeEvent(((ForeignExchangeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveForeignExchangeRow(ForeignExchangeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ForeignExchangeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CurrencyDataTable : global::System.Data.TypedTableBase<CurrencyRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCurrency_Id;
            
            private global::System.Data.DataColumn columnForeignExchange_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyDataTable() {
                this.TableName = "Currency";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CurrencyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Currency_IdColumn {
                get {
                    return this.columnCurrency_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForeignExchange_IdColumn {
                get {
                    return this.columnForeignExchange_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow this[int index] {
                get {
                    return ((CurrencyRow)(this.Rows[index]));
                }
            }
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanging;
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanged;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleting;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCurrencyRow(CurrencyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow AddCurrencyRow(string Name, ForeignExchangeRow parentForeignExchangeRowByForeignExchange_Currency) {
                CurrencyRow rowCurrencyRow = ((CurrencyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        null,
                        null};
                if ((parentForeignExchangeRowByForeignExchange_Currency != null)) {
                    columnValuesArray[2] = parentForeignExchangeRowByForeignExchange_Currency[1];
                }
                rowCurrencyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCurrencyRow);
                return rowCurrencyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CurrencyDataTable cln = ((CurrencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CurrencyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnCurrency_Id = base.Columns["Currency_Id"];
                this.columnForeignExchange_Id = base.Columns["ForeignExchange_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnCurrency_Id = new global::System.Data.DataColumn("Currency_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCurrency_Id);
                this.columnForeignExchange_Id = new global::System.Data.DataColumn("ForeignExchange_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnForeignExchange_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCurrency_Id}, true));
                this.columnName.Namespace = "";
                this.columnCurrency_Id.AutoIncrement = true;
                this.columnCurrency_Id.AllowDBNull = false;
                this.columnCurrency_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow NewCurrencyRow() {
                return ((CurrencyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CurrencyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CurrencyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CurrencyRowChanged != null)) {
                    this.CurrencyRowChanged(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CurrencyRowChanging != null)) {
                    this.CurrencyRowChanging(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CurrencyRowDeleted != null)) {
                    this.CurrencyRowDeleted(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CurrencyRowDeleting != null)) {
                    this.CurrencyRowDeleting(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCurrencyRow(CurrencyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CurrencyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MappingDataTable : global::System.Data.TypedTableBase<MappingRow> {
            
            private global::System.Data.DataColumn columnFieldColumn;
            
            private global::System.Data.DataColumn columnMapping_Text;
            
            private global::System.Data.DataColumn columnCurrency_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingDataTable() {
                this.TableName = "Mapping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MappingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MappingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColumnColumn {
                get {
                    return this.columnFieldColumn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mapping_TextColumn {
                get {
                    return this.columnMapping_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Currency_IdColumn {
                get {
                    return this.columnCurrency_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRow this[int index] {
                get {
                    return ((MappingRow)(this.Rows[index]));
                }
            }
            
            public event MappingRowChangeEventHandler MappingRowChanging;
            
            public event MappingRowChangeEventHandler MappingRowChanged;
            
            public event MappingRowChangeEventHandler MappingRowDeleting;
            
            public event MappingRowChangeEventHandler MappingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMappingRow(MappingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRow AddMappingRow(string Column, string Mapping_Text, CurrencyRow parentCurrencyRowByCurrency_Mapping) {
                MappingRow rowMappingRow = ((MappingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Column,
                        Mapping_Text,
                        null};
                if ((parentCurrencyRowByCurrency_Mapping != null)) {
                    columnValuesArray[2] = parentCurrencyRowByCurrency_Mapping[1];
                }
                rowMappingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMappingRow);
                return rowMappingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MappingDataTable cln = ((MappingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MappingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFieldColumn = base.Columns["Column"];
                this.columnMapping_Text = base.Columns["Mapping_Text"];
                this.columnCurrency_Id = base.Columns["Currency_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFieldColumn = new global::System.Data.DataColumn("Column", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFieldColumn);
                this.columnMapping_Text = new global::System.Data.DataColumn("Mapping_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnMapping_Text);
                this.columnCurrency_Id = new global::System.Data.DataColumn("Currency_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCurrency_Id);
                this.columnFieldColumn.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRow NewMappingRow() {
                return ((MappingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MappingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MappingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MappingRowChanged != null)) {
                    this.MappingRowChanged(this, new MappingRowChangeEvent(((MappingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MappingRowChanging != null)) {
                    this.MappingRowChanging(this, new MappingRowChangeEvent(((MappingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MappingRowDeleted != null)) {
                    this.MappingRowDeleted(this, new MappingRowChangeEvent(((MappingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MappingRowDeleting != null)) {
                    this.MappingRowDeleting(this, new MappingRowChangeEvent(((MappingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMappingRow(MappingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MappingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SheetDayDataTable : global::System.Data.TypedTableBase<SheetDayRow> {
            
            private global::System.Data.DataColumn columnSheetDay_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayDataTable() {
                this.TableName = "SheetDay";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SheetDayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SheetDayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SheetDay_IdColumn {
                get {
                    return this.columnSheetDay_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRow this[int index] {
                get {
                    return ((SheetDayRow)(this.Rows[index]));
                }
            }
            
            public event SheetDayRowChangeEventHandler SheetDayRowChanging;
            
            public event SheetDayRowChangeEventHandler SheetDayRowChanged;
            
            public event SheetDayRowChangeEventHandler SheetDayRowDeleting;
            
            public event SheetDayRowChangeEventHandler SheetDayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSheetDayRow(SheetDayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRow AddSheetDayRow() {
                SheetDayRow rowSheetDayRow = ((SheetDayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowSheetDayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSheetDayRow);
                return rowSheetDayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SheetDayDataTable cln = ((SheetDayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SheetDayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSheetDay_Id = base.Columns["SheetDay_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSheetDay_Id = new global::System.Data.DataColumn("SheetDay_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSheetDay_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSheetDay_Id}, true));
                this.columnSheetDay_Id.AutoIncrement = true;
                this.columnSheetDay_Id.AllowDBNull = false;
                this.columnSheetDay_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRow NewSheetDayRow() {
                return ((SheetDayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SheetDayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SheetDayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SheetDayRowChanged != null)) {
                    this.SheetDayRowChanged(this, new SheetDayRowChangeEvent(((SheetDayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SheetDayRowChanging != null)) {
                    this.SheetDayRowChanging(this, new SheetDayRowChangeEvent(((SheetDayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SheetDayRowDeleted != null)) {
                    this.SheetDayRowDeleted(this, new SheetDayRowChangeEvent(((SheetDayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SheetDayRowDeleting != null)) {
                    this.SheetDayRowDeleting(this, new SheetDayRowChangeEvent(((SheetDayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSheetDayRow(SheetDayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SheetDayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FrequencyDataTable : global::System.Data.TypedTableBase<FrequencyRow> {
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnFrequency_Id;
            
            private global::System.Data.DataColumn columnSheetDay_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyDataTable() {
                this.TableName = "Frequency";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrequencyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FrequencyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frequency_IdColumn {
                get {
                    return this.columnFrequency_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SheetDay_IdColumn {
                get {
                    return this.columnSheetDay_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow this[int index] {
                get {
                    return ((FrequencyRow)(this.Rows[index]));
                }
            }
            
            public event FrequencyRowChangeEventHandler FrequencyRowChanging;
            
            public event FrequencyRowChangeEventHandler FrequencyRowChanged;
            
            public event FrequencyRowChangeEventHandler FrequencyRowDeleting;
            
            public event FrequencyRowChangeEventHandler FrequencyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFrequencyRow(FrequencyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow AddFrequencyRow(string Value, SheetDayRow parentSheetDayRowBySheetDay_Frequency) {
                FrequencyRow rowFrequencyRow = ((FrequencyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Value,
                        null,
                        null};
                if ((parentSheetDayRowBySheetDay_Frequency != null)) {
                    columnValuesArray[2] = parentSheetDayRowBySheetDay_Frequency[0];
                }
                rowFrequencyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFrequencyRow);
                return rowFrequencyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FrequencyDataTable cln = ((FrequencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FrequencyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnFrequency_Id = base.Columns["Frequency_Id"];
                this.columnSheetDay_Id = base.Columns["SheetDay_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnFrequency_Id = new global::System.Data.DataColumn("Frequency_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFrequency_Id);
                this.columnSheetDay_Id = new global::System.Data.DataColumn("SheetDay_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSheetDay_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFrequency_Id}, true));
                this.columnValue.Namespace = "";
                this.columnFrequency_Id.AutoIncrement = true;
                this.columnFrequency_Id.AllowDBNull = false;
                this.columnFrequency_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow NewFrequencyRow() {
                return ((FrequencyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FrequencyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FrequencyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FrequencyRowChanged != null)) {
                    this.FrequencyRowChanged(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FrequencyRowChanging != null)) {
                    this.FrequencyRowChanging(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FrequencyRowDeleted != null)) {
                    this.FrequencyRowDeleted(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FrequencyRowDeleting != null)) {
                    this.FrequencyRowDeleting(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFrequencyRow(FrequencyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FrequencyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SheetDataTable : global::System.Data.TypedTableBase<SheetRow> {
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnSheet_Text;
            
            private global::System.Data.DataColumn columnFrequency_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDataTable() {
                this.TableName = "Sheet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SheetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SheetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sheet_TextColumn {
                get {
                    return this.columnSheet_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frequency_IdColumn {
                get {
                    return this.columnFrequency_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRow this[int index] {
                get {
                    return ((SheetRow)(this.Rows[index]));
                }
            }
            
            public event SheetRowChangeEventHandler SheetRowChanging;
            
            public event SheetRowChangeEventHandler SheetRowChanged;
            
            public event SheetRowChangeEventHandler SheetRowDeleting;
            
            public event SheetRowChangeEventHandler SheetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSheetRow(SheetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRow AddSheetRow(string Date, string Day, string Month, string Year, string Sheet_Text, FrequencyRow parentFrequencyRowByFrequency_Sheet) {
                SheetRow rowSheetRow = ((SheetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Date,
                        Day,
                        Month,
                        Year,
                        Sheet_Text,
                        null};
                if ((parentFrequencyRowByFrequency_Sheet != null)) {
                    columnValuesArray[5] = parentFrequencyRowByFrequency_Sheet[1];
                }
                rowSheetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSheetRow);
                return rowSheetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SheetDataTable cln = ((SheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SheetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDate = base.Columns["Date"];
                this.columnDay = base.Columns["Day"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnSheet_Text = base.Columns["Sheet_Text"];
                this.columnFrequency_Id = base.Columns["Frequency_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDate);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDay);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnYear);
                this.columnSheet_Text = new global::System.Data.DataColumn("Sheet_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnSheet_Text);
                this.columnFrequency_Id = new global::System.Data.DataColumn("Frequency_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFrequency_Id);
                this.columnDate.Namespace = "";
                this.columnDay.Namespace = "";
                this.columnMonth.Namespace = "";
                this.columnYear.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRow NewSheetRow() {
                return ((SheetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SheetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SheetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SheetRowChanged != null)) {
                    this.SheetRowChanged(this, new SheetRowChangeEvent(((SheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SheetRowChanging != null)) {
                    this.SheetRowChanging(this, new SheetRowChangeEvent(((SheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SheetRowDeleted != null)) {
                    this.SheetRowDeleted(this, new SheetRowChangeEvent(((SheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SheetRowDeleting != null)) {
                    this.SheetRowDeleting(this, new SheetRowChangeEvent(((SheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSheetRow(SheetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KiatnakinBank ds = new KiatnakinBank();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SheetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ForeignExchangeRow : global::System.Data.DataRow {
            
            private ForeignExchangeDataTable tableForeignExchange;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ForeignExchangeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableForeignExchange = ((ForeignExchangeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Capital {
                get {
                    try {
                        return ((string)(this[this.tableForeignExchange.CapitalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capital\' in table \'ForeignExchange\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForeignExchange.CapitalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ForeignExchange_Id {
                get {
                    return ((int)(this[this.tableForeignExchange.ForeignExchange_IdColumn]));
                }
                set {
                    this[this.tableForeignExchange.ForeignExchange_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapitalNull() {
                return this.IsNull(this.tableForeignExchange.CapitalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapitalNull() {
                this[this.tableForeignExchange.CapitalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow[] GetCurrencyRows() {
                if ((this.Table.ChildRelations["ForeignExchange_Currency"] == null)) {
                    return new CurrencyRow[0];
                }
                else {
                    return ((CurrencyRow[])(base.GetChildRows(this.Table.ChildRelations["ForeignExchange_Currency"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CurrencyRow : global::System.Data.DataRow {
            
            private CurrencyDataTable tableCurrency;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCurrency = ((CurrencyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCurrency.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Currency\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCurrency.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Currency_Id {
                get {
                    return ((int)(this[this.tableCurrency.Currency_IdColumn]));
                }
                set {
                    this[this.tableCurrency.Currency_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ForeignExchange_Id {
                get {
                    try {
                        return ((int)(this[this.tableCurrency.ForeignExchange_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForeignExchange_Id\' in table \'Currency\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCurrency.ForeignExchange_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRow ForeignExchangeRow {
                get {
                    return ((ForeignExchangeRow)(this.GetParentRow(this.Table.ParentRelations["ForeignExchange_Currency"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ForeignExchange_Currency"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCurrency.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCurrency.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForeignExchange_IdNull() {
                return this.IsNull(this.tableCurrency.ForeignExchange_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForeignExchange_IdNull() {
                this[this.tableCurrency.ForeignExchange_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRow[] GetMappingRows() {
                if ((this.Table.ChildRelations["Currency_Mapping"] == null)) {
                    return new MappingRow[0];
                }
                else {
                    return ((MappingRow[])(base.GetChildRows(this.Table.ChildRelations["Currency_Mapping"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MappingRow : global::System.Data.DataRow {
            
            private MappingDataTable tableMapping;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MappingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMapping = ((MappingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column {
                get {
                    try {
                        return ((string)(this[this.tableMapping.ColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column\' in table \'Mapping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMapping.ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mapping_Text {
                get {
                    try {
                        return ((string)(this[this.tableMapping.Mapping_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mapping_Text\' in table \'Mapping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMapping.Mapping_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Currency_Id {
                get {
                    try {
                        return ((int)(this[this.tableMapping.Currency_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Currency_Id\' in table \'Mapping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMapping.Currency_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow CurrencyRow {
                get {
                    return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["Currency_Mapping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Currency_Mapping"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumnNull() {
                return this.IsNull(this.tableMapping.ColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumnNull() {
                this[this.tableMapping.ColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapping_TextNull() {
                return this.IsNull(this.tableMapping.Mapping_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapping_TextNull() {
                this[this.tableMapping.Mapping_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrency_IdNull() {
                return this.IsNull(this.tableMapping.Currency_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrency_IdNull() {
                this[this.tableMapping.Currency_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SheetDayRow : global::System.Data.DataRow {
            
            private SheetDayDataTable tableSheetDay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SheetDayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSheetDay = ((SheetDayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SheetDay_Id {
                get {
                    return ((int)(this[this.tableSheetDay.SheetDay_IdColumn]));
                }
                set {
                    this[this.tableSheetDay.SheetDay_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow[] GetFrequencyRows() {
                if ((this.Table.ChildRelations["SheetDay_Frequency"] == null)) {
                    return new FrequencyRow[0];
                }
                else {
                    return ((FrequencyRow[])(base.GetChildRows(this.Table.ChildRelations["SheetDay_Frequency"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FrequencyRow : global::System.Data.DataRow {
            
            private FrequencyDataTable tableFrequency;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrequencyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrequency = ((FrequencyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableFrequency.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'Frequency\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrequency.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Frequency_Id {
                get {
                    return ((int)(this[this.tableFrequency.Frequency_IdColumn]));
                }
                set {
                    this[this.tableFrequency.Frequency_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SheetDay_Id {
                get {
                    try {
                        return ((int)(this[this.tableFrequency.SheetDay_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SheetDay_Id\' in table \'Frequency\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrequency.SheetDay_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRow SheetDayRow {
                get {
                    return ((SheetDayRow)(this.GetParentRow(this.Table.ParentRelations["SheetDay_Frequency"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SheetDay_Frequency"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableFrequency.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableFrequency.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSheetDay_IdNull() {
                return this.IsNull(this.tableFrequency.SheetDay_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSheetDay_IdNull() {
                this[this.tableFrequency.SheetDay_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRow[] GetSheetRows() {
                if ((this.Table.ChildRelations["Frequency_Sheet"] == null)) {
                    return new SheetRow[0];
                }
                else {
                    return ((SheetRow[])(base.GetChildRows(this.Table.ChildRelations["Frequency_Sheet"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SheetRow : global::System.Data.DataRow {
            
            private SheetDataTable tableSheet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SheetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSheet = ((SheetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableSheet.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Day {
                get {
                    try {
                        return ((string)(this[this.tableSheet.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableSheet.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableSheet.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sheet_Text {
                get {
                    try {
                        return ((string)(this[this.tableSheet.Sheet_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sheet_Text\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.Sheet_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Frequency_Id {
                get {
                    try {
                        return ((int)(this[this.tableSheet.Frequency_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency_Id\' in table \'Sheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet.Frequency_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow FrequencyRow {
                get {
                    return ((FrequencyRow)(this.GetParentRow(this.Table.ParentRelations["Frequency_Sheet"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Frequency_Sheet"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableSheet.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableSheet.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tableSheet.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tableSheet.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableSheet.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableSheet.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableSheet.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableSheet.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSheet_TextNull() {
                return this.IsNull(this.tableSheet.Sheet_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSheet_TextNull() {
                this[this.tableSheet.Sheet_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequency_IdNull() {
                return this.IsNull(this.tableSheet.Frequency_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequency_IdNull() {
                this[this.tableSheet.Frequency_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ForeignExchangeRowChangeEvent : global::System.EventArgs {
            
            private ForeignExchangeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRowChangeEvent(ForeignExchangeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignExchangeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CurrencyRowChangeEvent : global::System.EventArgs {
            
            private CurrencyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRowChangeEvent(CurrencyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MappingRowChangeEvent : global::System.EventArgs {
            
            private MappingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRowChangeEvent(MappingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MappingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SheetDayRowChangeEvent : global::System.EventArgs {
            
            private SheetDayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRowChangeEvent(SheetDayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetDayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FrequencyRowChangeEvent : global::System.EventArgs {
            
            private FrequencyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRowChangeEvent(FrequencyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SheetRowChangeEvent : global::System.EventArgs {
            
            private SheetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRowChangeEvent(SheetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591